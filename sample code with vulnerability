package com.example.awsservice;

import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.S3Object;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;

@Service
public class DataProcessorService {
    private static final Logger logger = Logger.getLogger(DataProcessorService.class.getName());
    private AmazonS3 s3Client;
    private AmazonSQS sqsClient;
    private Map<String, Object> cache = new HashMap<>(); // Non-thread safe cache
    
    public DataProcessorService() {
        // Hardcoded region
        s3Client = AmazonS3ClientBuilder.standard()
                .withRegion("us-east-1")
                .build();
        
        sqsClient = AmazonSQSClientBuilder.standard()
                .withRegion("us-east-1")
                .build();
    }
    
    public String processDataFromS3(String bucketName, String key) {
        S3Object s3Object = s3Client.getObject(new GetObjectRequest(bucketName, key));
        BufferedReader reader = new BufferedReader(new InputStreamReader(s3Object.getObjectContent()));
        
        StringBuilder content = new StringBuilder();
        String line;
        try {
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
            // Missing reader.close() - Resource leak
            
            return content.toString();
        } catch (IOException e) {
            logger.severe("Error reading S3 object: " + e.getMessage());
            return null; // Silent failure
        }
    }
    
    public void sendMessageToQueue(String queueUrl, String messageBody) {
        // No error handling or retry mechanism
        sqsClient.sendMessage(queueUrl, messageBody);
        logger.info("Message sent to queue: " + messageBody);
    }
    
    public void processBatchData(List<String> dataIds) {
        // Inefficient thread creation
        for (String id : dataIds) {
            new Thread(() -> {
                processData(id);
            }).start();
        }
    }
    
    private void processData(String id) {
        // Potential race condition with non-thread-safe HashMap
        if (cache.containsKey(id)) {
            Object data = cache.get(id);
            // Process cached data
        } else {
            Object newData = fetchDataFromDatabase(id);
            cache.put(id, newData);
        }
    }
    
    private Object fetchDataFromDatabase(String id) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            // Hardcoded credentials - security risk
            String url = "jdbc:mysql://my-database:3306/mydb";
            String username = "admin";
            String password = "secretpassword123";
            
            conn = DriverManager.getConnection(url, username, password);
            stmt = conn.createStatement();
            
            // SQL Injection vulnerability
            String query = "SELECT * FROM users WHERE user_id = " + id;
            rs = stmt.executeQuery(query);
            
            List<Object> results = new ArrayList<>();
            while (rs.next()) {
                // Process results
                results.add(rs.getString("data"));
            }
            
            return results;
        } catch (Exception e) {
            logger.severe("Database error: " + e.getMessage());
            return null;
        } finally {
            // Improper resource cleanup - potential resource leak
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
            } catch (Exception e) {
                logger.severe("Error closing resources: " + e.getMessage());
            }
            // Connection not closed
        }
    }
    
    public void createBucket(String bucketName) {
        // Missing permission check and bucket policy
        s3Client.createBucket(bucketName);
        logger.info("Created bucket: " + bucketName);
    }
    
    public void longRunningOperation() {
        try {
            // Inefficient busy wait
            for (int i = 0; i < 100; i++) {
                // Do some work
                Thread.sleep(100);
            }
        } catch (InterruptedException e) {
            // Empty catch block - swallowed exception
        }
    }
}
